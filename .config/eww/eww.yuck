(defwindow dashboard
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "0%"
                      :height "10%"
                      :anchor "center center")
  :stacking "overlay"
  :exclusive true
  :focusable false
  (dashboard)
)

(defwidget dashboard []
(eventbox :onhoverlost "eww open --toggle dashboard"
    (box    :orientation "horizontal"
            :spacing 20
            :space-evenly true
            :halign "center"
            :class "dash-box"
            (button :class "shutdown"
                    :onclick "systemctl poweroff"
                    " ")
            (button :class "reboot"
                    :onclick "systemctl reboot"
                    " ")
            (button :class "lock"
                    :onclick "loginctl lock-session"
                    " ")
            (button :class "logout"
                    :onclick "hyprctl dispatch exit"
                    " ")
            )
    )
)

;; (defwindow mainbar
;;   :monitor 0
;;   :windowtype "dock"
;;   :geometry (geometry :x "0%"
;;                       :y "10px"
;;                       :width "100%"
;;   :height "42px"
;;                       :anchor "top center")
;;   :stacking "bt"
;;   :exclusive true
;;   :focusable false
;;   (bar)
;;   )


;; (defwidget bar []
;;  (box :class "bar"
;;   :orientation "h"
;;   :space-evenly true
;;   (box :halign "start"
;;        :space-evenly false 
;;     (workspaces)
;;     (current-app))
;;   (box :halign "center"
;;        :space-evenly false 
;;     (clock))
;;   (box :halign "end"
;;        :space-evenly false 
;;     (sidestuff))))

;; ;; (deflisten workspace "hyprland-workspaces `hyprctl monitors -j | jq -r \".[0].name\"`")
;; (defvar workspace_numbers "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]")
;; (defpoll activeworkspace :interval "0.1s"
;;     "scripts/get_active_workspace.sh")
;; (defpoll filledworkspaces :interval "0.1s"
;;     "scripts/get_filled_workspaces.sh")
;; (defwidget workspaces []
;;  (eventbox :onscroll "hyprctl dispatch workspace `echo {} | sed 's/up/+/\' | sed 's/down/-/'`1"
;;     (box :class "workspaces"
;;          :space-evenly false
;;          :spacing 15
;;          (for i in workspace_numbers
;;             (button 
;;                 :onclick "hyprctl dispatch workspace ${i}"
;;                 :class {activeworkspace == i ? "active" : "${matches(filledworkspaces, " ${i} ") ? "filled" : "inactive"}"}
;;                 "${i}"
;;         )))))

;; (defpoll active-app :interval "0.15s"
;;     "scripts/get-active-name.sh")
;; (defwidget current-app []
;;     (label  :text active-app
;;             :class "active-app"
;;             :halign "end"
;;             :visible {active-app == "null" ? false : true}
;;             :limit-width 32)
;; )

;; (deflisten systray-items-count :initial 0 "scripts/systray-items.sh")
;; (defwidget sidestuff []
;;   (box :class "sidestuff" 
;;        :orientation "h" 
;;        :space-evenly false 
;;        :spacing 10
;;    (net)
;;    (systray :spacing 15
;;             :visible {systray-items-count > 0 ? true : false}
;;             :class "systray"
;;             :orientation "h"
;;             :space-evenly false
;;             :icon-size 18)
;;    (audio)
;;    (bright)
;;    (bat)
;; ))


;; (defpoll date :interval "5m"
;;   "scripts/date.sh")
;;     (defpoll time :interval "1s"
;;   "scripts/time.sh")
;; (defwidget clock []
;;     (button
;;         :onclick "eww open calendar --toggle"
;;         (box  :class "clock"
;;             :orientation "h"
;;             :space-evenly true
;;             :spacing 15
;;             (label :class "date" :text " ${date}  ${time}"))

;; ))

;; (defpoll sound :interval "0.25s" "scripts/get_volume.sh percent")
;; (defpoll sound-icon :interval "0.25s" "scripts/get_volume.sh icon")
;; (defwidget audio []
;;     (box    :orientation "h"
;;             :space-evenly "false"
;;             :class "audio"
;;             :spacing 15
;;             (label :text "${sound-icon}")
;;             (label :text "${sound}%")
;;     )
;; )

;; (defpoll network-name :interval "3s" "scripts/network.sh name")
;; ;; (defpoll network-signal :interval "2s" "scripts/network.sh signal")
;; (defwidget net []
;;     ;; (button :onclick "eww open wofi-wifi --toggle"
;;         (box    :orientation "h"
;;                 :space-evenly "false"
;;                 :class "net"
;;                 :spacing 15
;;                 (label :limit-width 15  :text network-name)
;;                 ;; (label :text network-signal)
;;     )
;; )

;; (defwidget bat []
;;     (button :onclick "eww open power-profile-window --toggle"
;; 	(box	:orientation "h"	
;; 			:space-evenly "false"
;;             :class "bat"		
;;             :spacing 15
;;             (label
;;                 :text battery)
;;             (label 
;;                 :text "${battery-cappacity}%"))))
;; (defpoll battery			:interval "5s"	"scripts/battery.sh icon")
;; (defpoll battery-cappacity	:interval "5s"	"scripts/battery.sh percent")

;; (defpoll current-profile :interval "2s" "powerprofilesctl get")
;; (defvar power-profiles '["performance", "balanced", "power-saver"]')
;; (defwidget power-profile []
;;     (box    :orientation "v"
;;             :space-evenly true
;;             :class "power-profile"
;;             (for profile in power-profiles
;;                 (button :onclick "powerprofilesctl set ${profile}"
;;                         :class {current-profile == profile ? "current-profile" : "other-profile"}
;;                         "${profile}")
;;                 ))
;; )

;; (defwindow power-profile-window
;;   :monitor 0
;;   :windowtype "dock"
;;   :geometry (geometry :x "20px"
;;                       :y "-2px"
;;                       :width "8%"
;;                       :height "10%"
;;                       :anchor "top right")
;;   :stacking "overlay"
;;   :exclusive false
;;   :focusable false
;;   (eventbox :onhoverlost "eww open power-profile-window --toggle"
;;   (power-profile)
;; ))

;; (deflisten brightness "scripts/brightness.sh")
;; (defwidget bright []
;; 	(box	:orientation "h"	
;; 			:space-evenly "false"
;;             :class "bright"		
;;             :spacing 10
;;             (label
;;                 :text "")
;;             (label 
;;                 :text "${brightness}%")))

;; (defpoll calendar_day :interval "10h"
;;     "date '+%d'")
;; (defpoll calendar_month :interval "10h"
;;     "scripts/calendar")
;; (defpoll calendar_year :interval "10h"
;;     "date '+%Y'")
;; (defwidget cal []
;; 	(box :class "cal-box" 
;; 		 :orientation "v"
;; 	(box :class "cal-inner-box"
;; 	(calendar :class "cal" 
;;               :day calendar_day 
;; 			  :month calendar_month 
;; 			  :year calendar_year))))

;; (defwindow calendar
;;   :monitor 0
;;   :windowtype "dock"
;;   :geometry (geometry :x "0"
;;                       :y "-3px"
;;                       :width "20%"
;;                       :height "18%"
;;                       :anchor "top center")
;;   :stacking "overlay"
;;   :exclusive false
;;   :focusable false
;;   (eventbox :onhoverlost "eww open calendar --toggle"
;;   (cal)
;;   ))



